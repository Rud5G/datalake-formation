Description: CloudFormation template to create AWS Lake Formation tag-based access resources
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Misc Configuration
        Parameters:
          - LatestAmiId
      - Label:
          default: User Configuration
        Parameters:
          - DataStewardUserPassword
          - DataEngineerUserPassword
          - DataAnalystUserPassword
    ParameterLabels:
      LatestAmiId:
        default: Latest AMI Id
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Image ID for the EC2 helper instance. DO NOT change this.
  DataStewardUserPassword:
    Type: String
    NoEcho: 'true'
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-\[\]\{\}|‘])[A-Za-z\d!@#$%^&*()_+-\[\]\{\}|‘]{8,}$
    ConstraintDescription: 'Password should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols'
    Description: >-
      Password for Data Steward user. Should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols, for example
      !@#$%^&*()_+-[]{}|‘ and not be identical to your AWS account name or email address
  DataEngineerUserPassword:
    Type: String
    NoEcho: 'true'
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-\[\]\{\}|‘])[A-Za-z\d!@#$%^&*()_+-\[\]\{\}|‘]{8,}$
    ConstraintDescription: 'Password should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols'
    Description: >-
      Password for Data Engineer user. Should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols, for example
      !@#$%^&*()_+-[]{}|‘ and not be identical to your AWS account name or email address
  DataAnalystUserPassword:
    Type: String
    NoEcho: 'true'
    AllowedPattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*()_+-\[\]\{\}|‘])[A-Za-z\d!@#$%^&*()_+-\[\]\{\}|‘]{8,}$
    ConstraintDescription: 'Password should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols'
    Description: >-
      Password for Data Analyst user. Should be a min. of 8 characters, include a min. of three of the following mix of character types: uppercase, lowercase, numbers, non-alphanumeric symbols, for example
      !@#$%^&*()_+-[]{}|‘ and not be identical to your AWS account name or email address
Resources:
  LakeFormationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: LF-Workshop-VPC
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !FindInMap
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref 'LakeFormationVPC'
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetOne
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: LF-Workshop-IG
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'LakeFormationVPC'
      InternetGatewayId: !Ref 'InternetGateway'
  InternetGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'LakeFormationVPC'
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'InternetGatewayRouteTable'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref 'InternetGatewayRouteTable'
      SubnetId: !Ref 'PublicSubnetOne'
  NATGatewayAttachment:
    Type: AWS::EC2::EIP
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref 'PublicSubnetOne'
      AllocationId: !GetAtt 'NATGatewayAttachment.AllocationId'
      Tags:
        - Key: Name
          Value: LF-NAT-Gateway
  NATGatewayRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'LakeFormationVPC'
      Tags:
        - Key: Name
          Value: LF-NAT-RouteTable
  NATGatewayRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref 'NATGatewayRouteTable'
      NatGatewayId: !Ref 'NATGateway'
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'EC2Role'
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - lf-tagbased-demo-accesslogs
          - !Ref 'AWS::AccountId'
      LoggingConfiguration:
        DestinationBucketName: !Join
          - '-'
          - - lf-tagbased-demo-accesslogs
            - !Ref 'AWS::AccountId'
        LogFilePrefix: s3-access-logs-
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'LoggingBucket'
                - /*
          - Sid: S3ServerAccessLogsPolicy
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'LoggingBucket'
                - /*
      Bucket: !Ref 'LoggingBucket'
  LFDemoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - '-'
        - - lf-tagbased-demo
          - !Ref 'AWS::AccountId'
      LoggingConfiguration:
        DestinationBucketName: !Ref 'LoggingBucket'
        LogFilePrefix: s3-access-logs-
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  LFDemoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref 'LFDemoBucket'
                - /*
      Bucket: !Ref 'LFDemoBucket'
  S3CopyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref 'LatestAmiId'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref 'PublicSubnetOne'
      UserData: !Base64
        Fn::Join:
          - ''
          - - "#!/bin/bash -ex\n"
            - "aws s3 cp s3://aws-data-analytics-workshops/lake-formation-workshop/sampledata/tripdata.csv /tmp/\n"
            - "sed '1d' /tmp/tripdata.csv > /tmp/tripdata_new.csv \n"
            - "mv -f /tmp/tripdata_new.csv /tmp/tripdata.csv \n"
            - aws s3 cp /tmp/tripdata.csv s3://
            - !Ref 'LFDemoBucket'
            - "/tag_database/\n"
            - aws s3 cp /tmp/tripdata.csv s3://
            - !Ref 'LFDemoBucket'
            - "/col_tag_database/\n"
            - 'aws s3api put-object --bucket '
            - !Ref 'LFDemoBucket'
            - ' --key athena-results/'
      Tags:
        - Key: Name
          Value: EC2-S3Data-Copier
  DataStewardUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref 'DataStewardUserPassword'
        PasswordResetRequired: false
      UserName: lf-data-steward
  DataStewardUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DataStewardUserGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager
      Path: /
      Policies:
        - PolicyName: LF-DataLake-Admin-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lakeformation:*
                  - cloudtrail:DescribeTrails
                  - cloudtrail:LookupEvents
                  - glue:GetDatabase
                  - glue:CreateDatabase
                  - glue:UpdateDatabase
                  - glue:DeleteDatabase
                  - glue:SearchTables
                  - glue:CreateTable
                  - glue:UpdateTable
                  - glue:DeleteTable
                  - glue:Get*
                  - glue:List*
                  - glue:BatchGetWorkflows
                  - glue:DeleteWorkflow
                  - glue:GetWorkflowRuns
                  - glue:StartWorkflowRun
                  - glue:GetWorkflow
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                  - s3:GetBucketAcl
                  - iam:ListUsers
                  - iam:ListRoles
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:CreateServiceLinkedRole
                  - cloudformation:*
                  - elasticmapreduce:*
                  - tag:Get*
                  - glue:BatchGetCrawlers
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                Resource: '*'
  AddDataStewardToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: DataStewardUserGroup
      Users:
        - !Ref 'DataStewardUser'
    DependsOn:
      - DataStewardUserGroup
      - DataStewardUser
  DataEngineerUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref 'DataEngineerUserPassword'
        PasswordResetRequired: false
      UserName: lf-data-engineer
  DataEngineerUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DataEngineerUserGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
      Path: /
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'LFDemoBucket'
                      - /athena-results/*
        - PolicyName: Tagbased-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lakeformation:*
                  - iam:ListUsers
                  - iam:ListRoles
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - glue:SearchTables
                  - glue:GetTableVersions
                Resource: '*'
  AddDataEngineerToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: DataEngineerUserGroup
      Users:
        - !Ref 'DataEngineerUser'
    DependsOn:
      - DataEngineerUserGroup
      - DataEngineerUser
  DataAnalystUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref 'DataAnalystUserPassword'
        PasswordResetRequired: false
      UserName: lf-data-analyst
  DataAnalystUserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: DataAnalystUserGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
      Path: /
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Put*
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref 'LFDemoBucket'
                      - /athena-results/*
  AddDataAnalystToGroup:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: DataAnalystUserGroup
      Users:
        - !Ref 'DataAnalystUser'
    DependsOn:
      - DataAnalystUserGroup
      - DataAnalystUser
Outputs:
  LFDemoBucketName:
    Description: Lake Formation Workshop Bucket Name
    Value: !Ref 'LFDemoBucket'
  AthenaQueryResultLocation:
    Description: Athena Query Result Location
    Value: !Join
      - ''
      - - s3://
        - !Ref 'LFDemoBucket'
        - /athena-results/
  NYCTaxiDataLocation:
    Description: NY Taxi Data Location
    Value: !Join
      - ''
      - - s3://
        - !Ref 'LFDemoBucket'
  DataStewardUserId:
    Description: User ID for Data Steward User
    Value: lf-data-steward
  DataStewardUserPassword:
    Description: Password for Data Steward User
    Value: Please use the password entered for Data Steward user while deploying the Stack
  DataEngineerUserId:
    Description: User ID for Data Engineer User
    Value: lf-data-engineer
  DataEngineerUserPassword:
    Description: Password for Data Engineer User
    Value: Please use the password entered for Data Engineer user while deploying the Stack
  DataAnalystUserId:
    Description: User ID for Data Analyst User
    Value: lf-data-analyst
  DataAnalystUserPassword:
    Description: Password for Data Analyst User
    Value: Please use the password entered for Data Analyst user while deploying the Stack
  ConsoleIAMLoginUrl:
    Description: Console IAM Login URL to try out different users
    Value: !Join
      - ''
      - - https://
        - !Ref 'AWS::AccountId'
        - .signin.aws.amazon.com/console
